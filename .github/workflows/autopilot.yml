name: MediaTools Autopilot

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */2 * * *"  # every 2 hours

jobs:
  run-autopilot:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install papermill nbconvert pandas ffmpeg-python yt-dlp openai-whisper srt pydrive2

      - name: Run Notebook directly
        run: |
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          papermill MediaTools_Autopilot.ipynb executed_${TIMESTAMP}.ipynb

      - name: Upload results to Google Drive
        env:
          GDRIVE_KEY: ${{ secrets.GDRIVE_KEY }}
          FOLDER_ID: ${{ secrets.FOLDER_ID }}
        run: |
          echo "$GDRIVE_KEY" > sa.json
          python3 - <<'EOF'
          import os, glob, json, zipfile
          from pydrive2.auth import GoogleAuth
          from pydrive2.drive import GoogleDrive

          # Auth
          with open("sa.json", "w") as f:
              f.write(os.getenv("GDRIVE_KEY"))
          gauth = GoogleAuth()
          gauth.LoadCredentialsFile("sa.json")
          drive = GoogleDrive(gauth)

          folder_id = os.getenv("FOLDER_ID")
          ts = os.popen("date +'%Y-%m-%d_%H-%M-%S'").read().strip()

          uploads = []

          # Upload executed notebook
          for nb in glob.glob("executed_*.ipynb"):
              f = drive.CreateFile({"title": os.path.basename(nb), "parents": [{"id": folder_id}]})
              f.SetContentFile(nb)
              f.Upload()
              uploads.append(nb)

          # Upload all generated mp4 + captions
          for pattern in ("*.mp4", "*.txt"):
              for file in glob.glob(pattern):
                  f = drive.CreateFile({"title": f"{os.path.basename(file).split('.')[0]}_{ts}{os.path.splitext(file)[1]}", 
                                        "parents": [{"id": folder_id}]})
                  f.SetContentFile(file)
                  f.Upload()
                  uploads.append(file)

          # Zip everything for backup
          zip_name = f"autopilot_{ts}.zip"
          with zipfile.ZipFile(zip_name, "w") as z:
              for file in uploads:
                  z.write(file)
          f = drive.CreateFile({"title": zip_name, "parents": [{"id": folder_id}]})
          f.SetContentFile(zip_name)
          f.Upload()
          EOF
