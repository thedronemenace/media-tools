name: MediaTools Autopilot

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */2 * * *"   # runs every 2 hours

jobs:
  run-autopilot:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install jupyter papermill ipykernel pyyaml pandas ffmpeg-python yt-dlp openai-whisper srt pydrive2
          python -m ipykernel install --user --name=python3

      - name: Run Notebook with Papermill
        run: |
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')
          papermill MediaTools_Autopilot.ipynb executed_${TIMESTAMP}.ipynb -k python3

      - name: Upload results to Google Drive
        env:
          GDRIVE_KEY: ${{ secrets.GDRIVE_KEY }}
          FOLDER_ID: ${{ secrets.FOLDER_ID }}
        run: |
          echo "$GDRIVE_KEY" > key.json
          python3 - <<EOF
          import os, json, glob, zipfile
          from pydrive2.auth import GoogleAuth
          from pydrive2.drive import GoogleDrive

          # Save service account key
          with open("sa.json", "w") as f:
              f.write(open("key.json").read())

          gauth = GoogleAuth()
          gauth.LoadCredentialsFile("sa.json")
          drive = GoogleDrive(gauth)

          folder_id = os.getenv("FOLDER_ID")

          # Upload executed notebooks
          for nb in glob.glob("executed_*.ipynb"):
              f = drive.CreateFile({"title": os.path.basename(nb), "parents": [{"id": folder_id}]})
              f.SetContentFile(nb)
              f.Upload()
              print(f"✅ Uploaded notebook {nb}")

          # Upload generated clips
          clips = glob.glob("*.mp4")
          for clip in clips:
              f = drive.CreateFile({"title": os.path.basename(clip), "parents": [{"id": folder_id}]})
              f.SetContentFile(clip)
              f.Upload()
              print(f"✅ Uploaded clip {clip}")

          # Upload generated captions
          captions = glob.glob("*.txt")
          for cap in captions:
              f = drive.CreateFile({"title": os.path.basename(cap), "parents": [{"id": folder_id}]})
              f.SetContentFile(cap)
              f.Upload()
              print(f"✅ Uploaded caption {cap}")

          # Create & upload ZIP of everything
          zip_name = "autopost_run.zip"
          with zipfile.ZipFile(zip_name, "w") as zipf:
              for file in clips + captions:
                  zipf.write(file)
          f = drive.CreateFile({"title": zip_name, "parents": [{"id": folder_id}]})
          f.SetContentFile(zip_name)
          f.Upload()
          print(f"✅ Uploaded archive {zip_name}")
          EOF
